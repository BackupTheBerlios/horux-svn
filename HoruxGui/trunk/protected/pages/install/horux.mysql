# Horux install sql

#
# Structure de la table `hr_access_level`
#

CREATE TABLE IF NOT EXISTS `hr_access_level` (
  `id` int(10) unsigned NOT NULL auto_increment,
  `name` varchar(50) NOT NULL,
  `full_access` smallint(1) NOT NULL default '0',
  `non_working_day` smallint(1) NOT NULL default '0',
  `week_end` smallint(1) NOT NULL default '0',
  `validity_date` date default NULL,
  `validity_date_to` date default NULL,
  `monday_default` smallint(6) NOT NULL default '0',
  `comment` varchar(50) default NULL,
  `locked` int(11) NOT NULL default '0',
  PRIMARY KEY  (`id`),
  UNIQUE KEY `Name` (`name`)
) TYPE=MyISAM CHARACTER SET `utf8`;

#
# Structure de la table `hr_access_time`
#

CREATE TABLE IF NOT EXISTS `hr_access_time` (
  `id` bigint(20) unsigned NOT NULL auto_increment,
  `id_access_level` bigint(20) NOT NULL default '0',
  `day` varchar(10) NOT NULL default '0',
  `from` int(11) NOT NULL default '0',
  `until` int(11) NOT NULL default '0',
  PRIMARY KEY  (`id`)
) TYPE=MyISAM CHARACTER SET `utf8`;

#
# Structure de la table `hr_openTime`
#

CREATE TABLE IF NOT EXISTS `hr_openTime` (
  `id` int(10) unsigned NOT NULL auto_increment,
  `name` varchar(50) NOT NULL,
  `non_working_day` smallint(1) NOT NULL default '0',
  `week_end` smallint(1) NOT NULL default '0',
  `validity_date` date default NULL,
  `validity_date_to` date default NULL,
  `monday_default` smallint(6) NOT NULL default '0',
  `comment` varchar(50) default NULL,
  `locked` int(11) NOT NULL default '0',
  PRIMARY KEY  (`id`),
  UNIQUE KEY `Name` (`name`)
) TYPE=MyISAM CHARACTER SET `utf8`;

#
# Structure de la table `hr_openTime_time`
#

CREATE TABLE IF NOT EXISTS `hr_openTime_time` (
  `id` bigint(20) unsigned NOT NULL auto_increment,
  `id_openTime` bigint(20) NOT NULL default '0',
  `day` varchar(10) NOT NULL default '0',
  `from` int(11) NOT NULL default '0',
  `until` int(11) NOT NULL default '0',
  PRIMARY KEY  (`id`)
) TYPE=MyISAM CHARACTER SET `utf8`;

#
# Structure de la table `hr_openTime_attribution`
#

CREATE TABLE IF NOT EXISTS `hr_openTime_attribution` (
  `id` bigint(20) NOT NULL auto_increment,
  `id_device` bigint(20) NOT NULL default '0',
  `id_openTime` bigint(20) NOT NULL default '0',
  PRIMARY KEY  (`id`)
) TYPE=MyISAM CHARACTER SET `utf8`;

#
# Structure de la table `hr_alarms`
#

CREATE TABLE IF NOT EXISTS `hr_alarms` (
  `id` int(11) NOT NULL auto_increment,
  `type` int(11) NOT NULL default '0',
  `datetime_` datetime NOT NULL default '0000-00-00 00:00:00',
  `id_object` int(11) NOT NULL default '0',
  `message` text NOT NULL,
  `checked` smallint(1) NOT NULL default '0',
  PRIMARY KEY  (`id`)
) TYPE=MyISAM CHARACTER SET `utf8`;


#
# Structure de la table `hr_component`
#

CREATE TABLE IF NOT EXISTS `hr_component` (
  `id` smallint(6) NOT NULL auto_increment,
  `id_install` smallint(6) NOT NULL,
  `parentmenu` smallint(6) NOT NULL,
  `menuname` varchar(30) NOT NULL,
  `page` varchar(100) NOT NULL,
  `iconmenu` varchar(200) NOT NULL,
  `locked` int(11) NOT NULL default '0',
  PRIMARY KEY  (`id`)
) TYPE=MyISAM CHARACTER SET `utf8`;

#
# Contenu de la table `hr_component`
#

INSERT INTO `hr_component` (`id`, `id_install`, `parentmenu`, `menuname`, `page`, `iconmenu`) VALUES
(1, 3, 0, 'Tracking', 'components.tracking.tracking', 'icon-16-tracking.png');

# --------------------------------------------------------

#
# Structure de la table `hr_config`
#

CREATE TABLE IF NOT EXISTS `hr_config` (
  `id` smallint(6) NOT NULL auto_increment,
  `xmlrpc_server` varchar(20) NOT NULL default 'localhost',
  `xmlrpc_port` int(11) NOT NULL default '1083',
  `log_path` varchar(100) NOT NULL,
  `debug_mode` smallint(1) NOT NULL,
  `server_path` varchar(50) NOT NULL,
  `user_method` varchar(30) NOT NULL,
  `key` varchar(10) NOT NULL,
  `mail_mailer` set('mail','sendmail','smtp') NOT NULL default 'sendmail',
  `mail_mail_from` varchar(50) NOT NULL,
  `mail_from_name` varchar(50) NOT NULL,
  `mail_sendmail_path` varchar(50) NOT NULL default '/usr/sbin/sendmail',
  `mail_smtp_auth` smallint(1) NOT NULL default '0',
  `mail_smtp_safe` set('none','tls','ssl') NOT NULL default 'none',
  `mail_smtp_username` varchar(50) NOT NULL,
  `mail_smtp_password` varchar(50) NOT NULL,
  `mail_smtp_host` varchar(50) NOT NULL default 'localhost',
  `mail_smtp_port` int(11) NOT NULL default '21',
  `publicurl` varchar(255) NOT NULL,
  PRIMARY KEY  (`id`)
) TYPE=MyISAM CHARACTER SET `utf8` ;

--
-- Contenu de la table `hr_config`
--


INSERT INTO `hr_config` (`id`, `xmlrpc_server`, `xmlrpc_port`, `log_path`, `debug_mode`, `server_path`, `key`, `mail_mailer`, `mail_mail_from`, `mail_from_name`, `mail_sendmail_path`, `mail_smtp_auth`, `mail_smtp_safe`, `mail_smtp_username`, `mail_smtp_password`, `mail_smtp_host`, `mail_smtp_port`, `publicurl`) VALUES
(1, 'localhost', 1083, '', 0, '.', '', 'mail', '', '', '/usr/sbin/sendmail', 0, 'none', '', '', '', 0, '');

# --------------------------------------------------------

#
# Structure de la table `hr_device`
#

CREATE TABLE IF NOT EXISTS `hr_device` (
  `id` int(11) NOT NULL auto_increment,
  `name` varchar(100) NOT NULL,
  `accessPoint` smallint(1) NOT NULL,
  `type` varchar(40) NOT NULL,
  `parent_id` int(11) NOT NULL default '0',
  `isLog` smallint(1) NOT NULL,
  `locked` smallint(11) NOT NULL default '0',
  `description` varchar(150) NOT NULL,
  `accessPlugin` varchar(30) NOT NULL,
  PRIMARY KEY  (`id`)
) TYPE=MyISAM CHARACTER SET `utf8`;

# --------------------------------------------------------

-- --------------------------------------------------------

--
-- Structure de la table `hr_department`
--

CREATE TABLE IF NOT EXISTS `hr_department` (
  `id` smallint(6) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) NOT NULL,
  `description` varchar(255) NOT NULL,
  `locked` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) TYPE=MyISAM CHARACTER SET `utf8`;

#
# Structure de la table `hr_gui_log`
#

CREATE TABLE IF NOT EXISTS `hr_gui_log` (
  `id` bigint(20) NOT NULL auto_increment,
  `when` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,
  `who` varchar(30) NOT NULL default '',
  `what` text NOT NULL,
  PRIMARY KEY  (`id`)
) TYPE=MyISAM CHARACTER SET `utf8`;

#
# Contenu de la table `hr_gui_log`
#


# --------------------------------------------------------

#
# Structure de la table `hr_gui_permissions`
#

CREATE TABLE IF NOT EXISTS `hr_gui_permissions` (
  `id` smallint(5) unsigned NOT NULL auto_increment,
  `page` varchar(255) collate utf8_unicode_ci default NULL,
  `selector` enum('user_id','group_id') collate utf8_unicode_ci default NULL,
  `value` smallint(5) unsigned default NULL,
  `allowed` enum('','1') collate utf8_unicode_ci NOT NULL,
  `shortcut` int(1) NOT NULL,
  PRIMARY KEY  (`id`),
  KEY `selector` (`selector`,`value`,`page`)
) TYPE=MyISAM CHARACTER SET `utf8`;

#
# Contenu de la table `hr_gui_permissions`
#

INSERT INTO `hr_gui_permissions` (`page`, `selector`, `value`, `allowed`, `shortcut`) VALUES
('controlPanel.ControlPanel', 'group_id', 1, '1', 0),
('site.Site', 'group_id', 1, '1', 1),
('system.Alarms', 'group_id', 1, '1', 1),
('system.Service', 'group_id', 1, '1', 1),
('system.Status', 'group_id', 1, '1', 1),
('user.UserList', 'group_id', 1, '1', 1),
('user.add', 'group_id', 1, '1',0),
('user.mod', 'group_id', 1, '1',0),
('user.attribution', 'group_id', 1, '1',0),
('user.groups', 'group_id', 1, '1', 0),
('user.UserWizzard', 'group_id', 1, '1', 1),
('userGroup.UserGroupList', 'group_id', 1, '1', 1),
('userGroup.add', 'group_id', 1, '1',0),
('userGroup.mod', 'group_id', 1, '1',0),
('key.KeyList', 'group_id', 1, '1', 1),
('key.add', 'group_id', 1, '1',0),
('key.mod', 'group_id', 1, '1',0),
('key.recycling', 'group_id', 1, '1', 1),
('accessLevel.accessLevelList', 'group_id', 1, '1', 1),
('accessLevel.add', 'group_id', 1, '1',0),
('accessLevel.mod', 'group_id', 1, '1',0),
('nonWorkingDay.nonWorkingDay', 'group_id', 1, '1', 1),
('nonWorkingDay.add', 'group_id', 1, '1',0),
('nonWorkingDay.mod', 'group_id', 1, '1',0),
('tool.GlobalCheckin', 'group_id', 1, '1', 1),
('tool.GuiLog', 'group_id', 1, '1', 1),
('installation.extensions', 'group_id', 1, '1', 1),
('installation.template', 'group_id', 1, '1',0),
('installation.language', 'group_id', 1, '1',0),
('installation.componentconfig', 'group_id', 1, '1',0),
('superuser.userList', 'group_id', 1, '1', 1),
('superuser.userAdd', 'group_id', 1, '1',0),
('superuser.userMod', 'group_id', 1, '1',0),
('superuser.userGroupList', 'group_id', 1, '1', 1),
('superuser.userGroupAdd', 'group_id', 1, '1',0),
('superuser.userGroupMod', 'group_id', 1, '1',0),
('configuration.config', 'group_id', 1, '1', 1),
('installation.components', 'group_id', 1, '1',0),
('installation.devices', 'group_id', 1, '1',0),
('hardware.HardwareList', 'group_id', 1, '1', 1),
('hardware.HardwareAddList', 'group_id', 1, '1',0),
('components.tracking.tracking', 'group_id', 1, '1', 1),
('help.SystemInfo', 'group_id', 1, '1',0),
('help.About', 'group_id', 1, '1',0),
('openTime.openTimeList', 'group_id', 1, '1',0),
('openTime.add', 'group_id', 1, '1',0),
('openTime.mod', 'group_id', 1, '1',0),
('system.Notification', 'group_id', 1, '1',0),
('system.NotificationAdd', 'group_id', 1, '1',0),
('system.NotificationMod', 'group_id', 1, '1',0);


# --------------------------------------------------------

#
# Structure de la table `hr_install`
#

CREATE TABLE IF NOT EXISTS `hr_install` (
  `id` smallint(6) NOT NULL auto_increment,
  `name` varchar(100) NOT NULL,
  `type` set('template','component','language','device') NOT NULL,
  `system` smallint(1) NOT NULL,
  `default` smallint(1) NOT NULL,
  `param` varchar(100) NOT NULL,
  PRIMARY KEY  (`id`)
) TYPE=MyISAM CHARACTER SET `utf8`;

#
# Contenu de la table `hr_install`
#

INSERT INTO `hr_install` (`id`, `name`, `type`, `system`, `default`, `param`) VALUES
(1, 'letux', 'template', 1, 1, ''),
(2, 'English', 'language', 1, 1, 'en'),
(3, 'tracking', 'component', 1, 0, ''),
(4, 'Fran√ßais', 'language', 0, 0, 'fr');
# --------------------------------------------------------

#
# Structure de la table `hr_keys`
#

CREATE TABLE IF NOT EXISTS `hr_keys` (
  `id` bigint(20) unsigned NOT NULL auto_increment,
  `identificator` varchar(30) NOT NULL default '',
  `serialNumber` varchar(128) NOT NULL,
  `isUsed` smallint(1) NOT NULL default '0',
  `isBlocked` smallint(1) NOT NULL default '0',
  `locked` int(11) NOT NULL default '0',
  PRIMARY KEY  (`id`),
  UNIQUE KEY `serialNumber` (`serialNumber`),
  KEY `identificator` (`identificator`)
) TYPE=MyISAM CHARACTER SET `utf8`;


INSERT INTO `hr_keys` (`id`, `identificator`, `serialNumber`, `isUsed`, `isBlocked`, `locked`) VALUES
(1, '??', '0000000000000000', 0, 1, 0);

# --------------------------------------------------------

#
# Structure de la table `hr_keys_attribution`
#

CREATE TABLE IF NOT EXISTS `hr_keys_attribution` (
  `id` bigint(20) NOT NULL auto_increment,
  `id_key` bigint(20) NOT NULL default '0',
  `id_user` bigint(20) NOT NULL default '0',
  PRIMARY KEY  (`id`)
) TYPE=MyISAM CHARACTER SET `utf8`;

# --------------------------------------------------------

#
# Structure de la table `hr_non_working_day`
#

CREATE TABLE IF NOT EXISTS `hr_non_working_day` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) NOT NULL DEFAULT '',
  `from` date DEFAULT NULL,
  `until` date DEFAULT NULL,
  `comment` varchar(100) DEFAULT NULL,
  `locked` int(11) NOT NULL DEFAULT '0',
  `color` varchar(7) NOT NULL DEFAULT '#FF6666',
  `period` set('allday','morning','afternoon') NOT NULL DEFAULT 'allday',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8;


# --------------------------------------------------------

#
# Structure de la table `hr_site`
#

CREATE TABLE IF NOT EXISTS `hr_site` (
  `id` smallint(6) NOT NULL auto_increment,
  `name` varchar(255) NOT NULL,
  `street` varchar(255) NOT NULL,
  `npa` varchar(10) NOT NULL,
  `city` varchar(255) NOT NULL,
  `phone` varchar(20) NOT NULL,
  `fax` varchar(20) NOT NULL,
  `email` varchar(40) NOT NULL,
  `website` varchar(50) NOT NULL,
  `logo` varchar(50) NOT NULL,
  `tva_number` varchar(50) NOT NULL,
  `devise` varchar(5) NOT NULL,
  `tva` float NOT NULL,
  PRIMARY KEY  (`id`)
) TYPE=MyISAM CHARACTER SET `utf8`;

# --------------------------------------------------------

#
# Structure de la table `hr_standalone_action_service`
#

CREATE TABLE IF NOT EXISTS `hr_standalone_action_service` (
  `id` bigint(20) NOT NULL auto_increment,
  `type` set('add','sub') NOT NULL default 'add',
  `serialNumber` varchar(128) NOT NULL default '0',
  `rd_id` int(11) NOT NULL default '0',
  PRIMARY KEY  (`id`)
) TYPE=MyISAM CHARACTER SET `utf8`;

#
# Contenu de la table `hr_standalone_action_service`
#


# --------------------------------------------------------

#
# Structure de la table `hr_superusers`
#

CREATE TABLE IF NOT EXISTS `hr_superusers` (
  `id` smallint(5) unsigned NOT NULL auto_increment,
  `group_id` smallint(5) unsigned NOT NULL,
  `user_id` smallint(5) unsigned default '0',
  `name` varchar(32) collate utf8_unicode_ci NOT NULL,
  `password` varchar(64) collate utf8_unicode_ci default NULL,
  `isLogged` smallint(1) NOT NULL,
  `locked` int(11) NOT NULL default '0',
  `session_id` varchar(100) collate utf8_unicode_ci NOT NULL,
  `lastConnection` datetime NOT NULL,
  `email` varchar(30) default NULL,
  KEY `id` (`id`)
) TYPE=MyISAM CHARACTER SET `utf8`;

# --------------------------------------------------------

#
# Structure de la table `hr_superuser_group`
#

CREATE TABLE IF NOT EXISTS `hr_superuser_group` (
  `id` smallint(5) unsigned NOT NULL auto_increment,
  `name` varchar(32) collate utf8_unicode_ci NOT NULL,
  `superAdmin` smallint(1) NOT NULL default '0',
  `description` varchar(200) collate utf8_unicode_ci NOT NULL,
  `locked` int(11) NOT NULL default '0',
  `dispUserLoggedIn` int(1) NOT NULL,
  `dispLastAlarm` int(1) NOT NULL,
  `dispLastTracking` int(1) NOT NULL,
  PRIMARY KEY  (`id`)
) TYPE=MyISAM CHARACTER SET `utf8`;

#
# Contenu de la table `hr_superuser_group`
#

INSERT INTO `hr_superuser_group` (`id`, `name`, `superAdmin`, `description`, `locked`, `dispUserLoggedIn`, `dispLastAlarm`, `dispLastTracking`) VALUES
(1, 'admin', 1, 'Admin', 0, 1, 1, 1);

# --------------------------------------------------------

#
# Structure de la table `hr_tracking`
#

CREATE TABLE IF NOT EXISTS `hr_tracking` (
  `id` bigint(20) unsigned NOT NULL auto_increment,
  `id_user` int(11) NOT NULL default '0',
  `id_key` int(11) NOT NULL default '0',
  `time` time NOT NULL default '00:00:00',
  `date` date NOT NULL default '0000-00-00',
  `id_entry` int(11) NOT NULL default '0',
  `is_access` smallint(1) NOT NULL default '1',
  `id_comment` int(11) NOT NULL default '0',
  `key` varchar(128) NOT NULL,
  `extData` varchar(50) NOT NULL,
  PRIMARY KEY  (`id`),
  KEY `time` (`time`,`date`),
  KEY `user` (`id_user`)
) TYPE=MyISAM CHARACTER SET `utf8`;


# --------------------------------------------------------

#
# Structure de la table `hr_user`
#

CREATE TABLE IF NOT EXISTS `hr_user` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(30) NOT NULL,
  `firstname` varchar(30) NOT NULL,
  `street` varchar(40) NOT NULL,
  `city` varchar(30) NOT NULL,
  `country` varchar(30) NOT NULL,
  `zip` varchar(10) NOT NULL,
  `phone1` varchar(16) NOT NULL,
  `phone2` varchar(16) NOT NULL,
  `email1` varchar(50) NOT NULL,
  `email2` varchar(50) NOT NULL,
  `picture` varchar(255) NOT NULL,
  `language` varchar(30) NOT NULL,
  `sex` enum('F','M') NOT NULL DEFAULT 'F',
  `validity_date` date NOT NULL DEFAULT '0000-00-00',
  `isBlocked` smallint(1) NOT NULL DEFAULT '0',
  `locked` int(11) NOT NULL DEFAULT '0',
  `department` int(11) NOT NULL,
  `firme` varchar(30) NOT NULL,
  `street_pr` varchar(30) NOT NULL,
  `npa_pr` varchar(10) NOT NULL,
  `city_pr` varchar(30) NOT NULL,
  `country_pr` varchar(30) NOT NULL,
  `pin_code` varchar(12) NOT NULL,
  `password` varchar(64) NOT NULL,
  `fax` varchar(16) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `name` (`name`),
  KEY `firstname` (`firstname`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8;

INSERT INTO `hr_user` (`id`, `name`, `firstname`, `street`, `city`, `country`, `zip`, `phone1`, `phone2`, `email1`, `email2`, `picture`, `language`, `sex`, `validity_date`, `isBlocked`, `locked`, `department`, `firme`, `street_pr`, `npa_pr`, `city_pr`, `country_pr`, `pin_code`, `password`, `fax`) VALUES
(1, '??', '??', '', '', '', '', '', '', '', '', '', '', 'F', '0000-00-00', 0, 0, 0, '', '', '', '', '', '', '', '');

# --------------------------------------------------------

#
# Structure de la table `hr_user_group`
#

CREATE TABLE IF NOT EXISTS `hr_user_group` (
  `id` bigint(20) unsigned NOT NULL auto_increment,
  `name` varchar(30) NOT NULL default '',
  `comment` varchar(50) default NULL,
  `locked` int(11) NOT NULL default '0',
  `accessPlugin` varchar(30) default NULL,
  PRIMARY KEY  (`id`)
) TYPE=MyISAM CHARACTER SET `utf8`;


# --------------------------------------------------------

#
# Structure de la table `hr_user_group_access`
#

CREATE TABLE IF NOT EXISTS `hr_user_group_access` (
  `id` bigint(20) unsigned NOT NULL auto_increment,
  `id_group` bigint(20) NOT NULL default '0',
  `id_device` bigint(20) NOT NULL default '0',
  `id_access_level` bigint(20) NOT NULL default '0',
  PRIMARY KEY  (`id`)
) TYPE=MyISAM CHARACTER SET `utf8`;


# --------------------------------------------------------

#
# Structure de la table `hr_user_group_attribution`
#

CREATE TABLE IF NOT EXISTS `hr_user_group_attribution` (
  `id` bigint(20) NOT NULL auto_increment,
  `id_user` bigint(20) NOT NULL default '0',
  `id_group` bigint(20) NOT NULL default '0',
  PRIMARY KEY  (`id`)
) TYPE=MyISAM CHARACTER SET `utf8`;


# --------------------------------------------------------

#
#  Structure de la table `hr_user_action`
#


CREATE TABLE `hr_user_action` (
  `id` int(11) NOT NULL auto_increment,
  `name` varchar(30) NOT NULL,
  `page` varchar(100) NOT NULL,
  `icon` varchar(100) NOT NULL,
  `tip` varchar(255) NOT NULL,
  `catalog` varchar(30) NOT NULL,
  `type` set('userList','userWizardTpl','module') NOT NULL,
  PRIMARY KEY  (`id`)
) TYPE=MyISAM CHARACTER SET `utf8`;

--
-- Structure de la table `hr_notification`
--

CREATE TABLE `hr_notification` (
  `id` int(11) NOT NULL auto_increment,
  `name` varchar(40) NOT NULL,
  `emails` text NOT NULL,
  `description` varchar(255) NOT NULL,
  `locked` int(11) NOT NULL default '0',
  PRIMARY KEY  (`id`)
) TYPE=MyISAM CHARACTER SET `utf8`;

-- --------------------------------------------------------

--
-- Structure de la table `hr_notification_code`
--

CREATE TABLE `hr_notification_code` (
  `id_notification` int(11) NOT NULL,
  `type` varchar(40) NOT NULL,
  `code` varchar(30) NOT NULL,
  `param` varchar(100) NOT NULL
)  TYPE=MyISAM CHARACTER SET `utf8`;

-- --------------------------------------------------------

--
-- Structure de la table `hr_notification_su`
--

CREATE TABLE `hr_notification_su` (
  `id_notification` int(11) NOT NULL,
  `id_superuser` int(11) NOT NULL
)  TYPE=MyISAM CHARACTER SET `utf8`;


-- --------------------------------------------------------

--
-- Structure de la table `hr_trigger_change`
--

CREATE TABLE `hr_trigger_change` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `action` set('UPDATE','INSERT','DELETE') NOT NULL,
  `table` varchar(100) NOT NULL,
  `key` varchar(30) NOT NULL,
  `newValue` text NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8;

-- --------------------------------------------------------
--
-- TRIGGER
--
-- --------------------------------------------------------

-- --------------------------------------------------------

--
-- Structure de la table `hr_access_level`
--

Delimiter $$

DROP TRIGGER IF EXISTS hr_access_level_trigger_u$$

CREATE TRIGGER hr_access_level_trigger_u AFTER UPDATE ON hr_access_level
FOR EACH ROW
BEGIN
IF (NEW.locked = 0) THEN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_access_level','UPDATE',CONCAT('id=',NEW.id),CONCAT('\'',NEW.id,'\',\'',NEW.name,'\',\'',NEW.full_access ,'\',\'',NEW.non_working_day,'\',\'',NEW.week_end,'\',\'',NEW.validity_date ,'\',\'',NEW.validity_date_to,'\',\'',NEW.monday_default,'\',\'',NEW.comment,'\',\'',NEW.locked,'\''));
END IF;
END$$

DROP TRIGGER IF EXISTS hr_access_level_trigger_i$$

CREATE TRIGGER hr_access_level_trigger_i AFTER INSERT ON hr_access_level
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_access_level','INSERT','',CONCAT('\'',NEW.name,'\',\'',NEW.full_access ,'\',\'',NEW.non_working_day,'\',\'',NEW.week_end,'\',\'',NEW.validity_date ,'\',\'',NEW.validity_date_to,'\',\'',NEW.monday_default,'\',\'',NEW.comment,'\',\'',NEW.locked,'\''));
END$$

DROP TRIGGER IF EXISTS hr_access_level_trigger_d$$

CREATE TRIGGER hr_access_level_trigger_d AFTER DELETE ON hr_access_level
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_access_level','DELETE',CONCAT('id=',OLD.id),'');
END$$

Delimiter ;

-- --------------------------------------------------------

--
-- Structure de la table `hr_access_time`
--

Delimiter $$

DROP TRIGGER IF EXISTS hr_access_time_trigger_u$$

CREATE TRIGGER hr_access_time_trigger_u AFTER UPDATE ON hr_access_time
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_access_time','UPDATE',CONCAT('id=',NEW.id),CONCAT('\'',NEW.id,'\',\'',NEW.id_access_level,'\',\'',NEW.day ,'\',\'',NEW.from,'\',\'',NEW.until,'\''));
END$$

DROP TRIGGER IF EXISTS hr_access_time_trigger_i$$

CREATE TRIGGER hr_access_time_trigger_i AFTER INSERT ON hr_access_time
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_access_time','INSERT','',CONCAT('\'',NEW.id_access_level,'\',\'',NEW.day ,'\',\'',NEW.from,'\',\'',NEW.until,'\''));
END$$

DROP TRIGGER IF EXISTS hr_access_time_trigger_d$$

CREATE TRIGGER hr_access_time_trigger_d AFTER DELETE ON hr_access_time
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_access_time','DELETE',CONCAT('id=',OLD.id),'');
END$$

Delimiter ;

-- --------------------------------------------------------

--
-- Structure de la table `hr_device`
--

Delimiter $$

DROP TRIGGER IF EXISTS hr_device_trigger_u$$

CREATE TRIGGER hr_device_trigger_u AFTER UPDATE ON hr_device
FOR EACH ROW
BEGIN
IF (NEW.locked = 0) THEN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_device','UPDATE',CONCAT('id=',NEW.id),CONCAT('\'',NEW.id,'\',\'',NEW.name,'\',\'',NEW.accessPoint,'\',\'',NEW.type,'\',\'',NEW.parent_id,'\',\'',NEW.isLog,'\',\'',NEW.locked,'\',\'',NEW.description,'\',\'',NEW.accessPlugin,'\''));
END IF;
END$$

DROP TRIGGER IF EXISTS hr_device_trigger_i$$

CREATE TRIGGER hr_device_trigger_i AFTER INSERT ON hr_device
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_device','INSERT','',CONCAT('\'',NEW.name,'\',\'',NEW.accessPoint,'\',\'',NEW.type,'\',\'',NEW.parent_id,'\',\'',NEW.isLog,'\',\'',NEW.locked,'\',\'',NEW.description,'\',\'',NEW.accessPlugin,'\''));
END$$

DROP TRIGGER IF EXISTS hr_device_trigger_d$$

CREATE TRIGGER hr_device_trigger_d AFTER DELETE ON hr_device
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_device','DELETE',CONCAT('id=',OLD.id),'');
END$$

Delimiter ;

-- --------------------------------------------------------

--
-- Structure de la table `hr_keys`
--

Delimiter $$

DROP TRIGGER IF EXISTS hr_keys_trigger_u$$

CREATE TRIGGER hr_keys_trigger_u AFTER UPDATE ON hr_keys
FOR EACH ROW
BEGIN
IF (NEW.locked = 0) THEN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_keys','UPDATE',CONCAT('id=',NEW.id),CONCAT('\'',NEW.id,'\',\'',NEW.identificator,'\',\'',NEW.serialNumber,'\',\'',NEW.isUsed,'\',\'',NEW.isBlocked,'\',\'',NEW.locked,'\''));
END IF;
END$$

DROP TRIGGER IF EXISTS hr_keys_trigger_i$$

CREATE TRIGGER hr_keys_trigger_i AFTER INSERT ON hr_keys
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_keys','INSERT','',CONCAT('\'',NEW.identificator,'\',\'',NEW.serialNumber,'\',\'',NEW.isUsed,'\',\'',NEW.isBlocked,'\',\'',NEW.locked,'\''));
END$$

DROP TRIGGER IF EXISTS hr_keys_trigger_d$$

CREATE TRIGGER hr_keys_trigger_d AFTER DELETE ON hr_keys
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_keys','DELETE',CONCAT('id=',OLD.id),'');
END$$

Delimiter ;

-- --------------------------------------------------------

--
-- Structure de la table `hr_keys_attribution`
--

Delimiter $$

DROP TRIGGER IF EXISTS hr_keys_attribution_trigger_u$$

CREATE TRIGGER hr_keys_attribution_trigger_u AFTER UPDATE ON hr_keys_attribution
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_keys_attribution','UPDATE',CONCAT('id=',NEW.id),CONCAT('\'',NEW.id,'\',\'',NEW.id_key,'\',\'',NEW.id_user,'\''));
END$$

DROP TRIGGER IF EXISTS hr_keys_attribution_trigger_i$$

CREATE TRIGGER hr_keys_attribution_trigger_i AFTER INSERT ON hr_keys_attribution
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_keys_attribution','INSERT','',CONCAT('\'',NEW.id_key,'\',\'',NEW.id_user,'\''));
END$$

DROP TRIGGER IF EXISTS hr_keys_attribution_trigger_d$$

CREATE TRIGGER hr_keys_attribution_trigger_d AFTER DELETE ON hr_keys_attribution
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_keys_attribution','DELETE',CONCAT('id=',OLD.id),'');
END$$

Delimiter ;

-- --------------------------------------------------------

--
-- Structure de la table `hr_non_working_day`
--

Delimiter $$

DROP TRIGGER IF EXISTS hr_non_working_day_trigger_u$$

CREATE TRIGGER hr_non_working_day_trigger_u AFTER UPDATE ON hr_non_working_day
FOR EACH ROW
BEGIN
IF (NEW.locked = 0) THEN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_non_working_day','UPDATE',CONCAT('id=',NEW.id),CONCAT('\'',NEW.id,'\',\'',NEW.name,'\',\'',NEW.from,'\',\'',NEW.until,'\',\'',NEW.comment,'\',\'',NEW.locked,'\',\'',NEW.color,'\',\'',NEW.period,'\''));
END IF;
END$$

DROP TRIGGER IF EXISTS hr_non_working_day_trigger_i$$

CREATE TRIGGER hr_non_working_day_trigger_i AFTER INSERT ON hr_non_working_day
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_non_working_day','INSERT','',CONCAT('\'',NEW.name,'\',\'',NEW.from,'\',\'',NEW.until,'\',\'',NEW.comment,'\',\'',NEW.locked,'\',\'',NEW.color,'\',\'',NEW.period,'\''));
END$$

DROP TRIGGER IF EXISTS hr_non_working_day_trigger_d$$

CREATE TRIGGER hr_non_working_day_trigger_d AFTER DELETE ON hr_non_working_day
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_non_working_day','DELETE',CONCAT('id=',OLD.id),'');
END$$

Delimiter ;

-- --------------------------------------------------------
--
-- TRIGGER
--
-- --------------------------------------------------------

-- --------------------------------------------------------

--
-- Structure de la table `hr_openTime`
--

Delimiter $$

DROP TRIGGER IF EXISTS hr_openTime_trigger_u$$

CREATE TRIGGER hr_openTime_trigger_u AFTER UPDATE ON hr_openTime
FOR EACH ROW
BEGIN
IF (NEW.locked = 0) THEN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_openTime','UPDATE',CONCAT('id=',NEW.id),CONCAT('\'',NEW.id,'\',\'',NEW.name,'\',\'',NEW.non_working_day,'\',\'',NEW.week_end,'\',\'',NEW.validity_date ,'\',\'',NEW.validity_date_to,'\',\'',NEW.monday_default,'\',\'',NEW.comment,'\',\'',NEW.locked,'\''));
END IF;
END$$

DROP TRIGGER IF EXISTS hr_openTime_trigger_i$$

CREATE TRIGGER hr_openTime_trigger_i AFTER INSERT ON hr_openTime
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_openTime','INSERT','',CONCAT('\'',NEW.name,'\',\'',NEW.non_working_day,'\',\'',NEW.week_end,'\',\'',NEW.validity_date ,'\',\'',NEW.validity_date_to,'\',\'',NEW.monday_default,'\',\'',NEW.comment,'\',\'',NEW.locked,'\''));
END$$

DROP TRIGGER IF EXISTS hr_openTime_trigger_d$$

CREATE TRIGGER hr_openTime_trigger_d AFTER DELETE ON hr_openTime
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_openTime','DELETE',CONCAT('id=',OLD.id),'');
END$$

Delimiter ;

-- --------------------------------------------------------

--
-- Structure de la table `hr_openTime_attribution`
--

Delimiter $$

DROP TRIGGER IF EXISTS hr_openTime_attribution_trigger_u$$

CREATE TRIGGER hr_openTime_attribution_trigger_u AFTER UPDATE ON hr_openTime_attribution
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_openTime_attribution','UPDATE',CONCAT('id=',NEW.id),CONCAT('\'',NEW.id,'\',\'',NEW.id_device,'\',\'',NEW.id_openTime,'\''));
END$$

DROP TRIGGER IF EXISTS hr_openTime_attribution_trigger_i$$

CREATE TRIGGER hr_openTime_attribution_trigger_i AFTER INSERT ON hr_openTime_attribution
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_openTime_attribution','INSERT','',CONCAT('\'',NEW.id_device,'\',\'',NEW.id_openTime,'\''));
END$$

DROP TRIGGER IF EXISTS hr_openTime_attribution_trigger_d$$

CREATE TRIGGER hr_openTime_attribution_trigger_d AFTER DELETE ON hr_openTime_attribution
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_openTime_attribution','DELETE',CONCAT('id=',OLD.id),'');
END$$

Delimiter ;

-- --------------------------------------------------------

--
-- Structure de la table `hr_openTime_time`
--

Delimiter $$

DROP TRIGGER IF EXISTS hr_openTime_time_trigger_u$$

CREATE TRIGGER hr_openTime_time_trigger_u AFTER UPDATE ON hr_openTime_time
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_openTime_time','UPDATE',CONCAT('id=',NEW.id),CONCAT('\'',NEW.id,'\',\'',NEW.id_openTime,'\',\'',NEW.day ,'\',\'',NEW.from,'\',\'',NEW.until,'\''));
END$$

DROP TRIGGER IF EXISTS hr_openTime_time_trigger_i$$

CREATE TRIGGER hr_openTime_time_trigger_i AFTER INSERT ON hr_openTime_time
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_openTime_time','INSERT','',CONCAT('\'',NEW.id_openTime,'\',\'',NEW.day ,'\',\'',NEW.from,'\',\'',NEW.until,'\''));
END$$

DROP TRIGGER IF EXISTS hr_openTime_time_trigger_d$$

CREATE TRIGGER hr_openTime_time_trigger_d AFTER DELETE ON hr_openTime_time
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_openTime_time','DELETE',CONCAT('id=',OLD.id),'');
END$$

Delimiter ;

--
-- Structure de la table `hr_user`
--

Delimiter $$

DROP TRIGGER IF EXISTS hr_user_trigger_u$$

CREATE TRIGGER hr_user_trigger_u AFTER UPDATE ON hr_user
FOR EACH ROW
BEGIN
IF (NEW.locked = 0) THEN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_user','UPDATE',CONCAT('id=',NEW.id),CONCAT('\'',NEW.id,'\',\'',NEW.name,'\',\'',NEW.firstname ,'\',\'',NEW.street,'\',\'',NEW.city,'\',\'',NEW.country ,'\',\'',NEW.zip,'\',\'',NEW.phone1,'\',\'',NEW.phone2,'\',\'',NEW.email1,'\',\'',NEW.email2,'\',\'',NEW.picture,'\',\'',NEW.language,'\',\'',NEW.sex,'\',\'',NEW.validity_date,'\',\'',NEW.isBlocked,'\',\'',NEW.locked,'\',\'',NEW.department,'\',\'',NEW.firme,'\',\'',NEW.street_pr,'\',\'',NEW.npa_pr,'\',\'',NEW.city_pr,'\',\'',NEW.country_pr,'\',\'',NEW.pin_code,'\',\'',NEW.password,'\',\'',NEW.fax,'\''));
END IF;
END$$

DROP TRIGGER IF EXISTS hr_user_trigger_i$$

CREATE TRIGGER hr_user_trigger_i AFTER INSERT ON hr_user
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_user','INSERT','',CONCAT('\'',NEW.name,'\',\'',NEW.firstname ,'\',\'',NEW.street,'\',\'',NEW.city,'\',\'',NEW.country ,'\',\'',NEW.zip,'\',\'',NEW.phone1,'\',\'',NEW.phone2,'\',\'',NEW.email1,'\',\'',NEW.email2,'\',\'',NEW.picture,'\',\'',NEW.language,'\',\'',NEW.sex,'\',\'',NEW.validity_date,'\',\'',NEW.isBlocked,'\',\'',NEW.locked,'\',\'',NEW.department,'\',\'',NEW.firme,'\',\'',NEW.street_pr,'\',\'',NEW.npa_pr,'\',\'',NEW.city_pr,'\',\'',NEW.country_pr,'\',\'',NEW.pin_code,'\',\'',NEW.password,'\',\'',NEW.fax,'\''));
END$$

DROP TRIGGER IF EXISTS hr_user_trigger_d$$

CREATE TRIGGER hr_user_trigger_d AFTER DELETE ON hr_user
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_user','DELETE',CONCAT('id=',OLD.id),'');
END$$

Delimiter ;

-- --------------------------------------------------------

--
-- Structure de la table `hr_user_group`
--

Delimiter $$

DROP TRIGGER IF EXISTS hr_user_group_trigger_u$$

CREATE TRIGGER hr_user_group_trigger_u AFTER UPDATE ON hr_user_group
FOR EACH ROW
BEGIN
IF (NEW.locked = 0) THEN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_user_group','UPDATE',CONCAT('id=',NEW.id),CONCAT('\'',NEW.id,'\',\'',NEW.name,'\',\'',NEW.comment ,'\',\'',NEW.locked,'\',\'',NEW.accessPlugin,'\''));
END IF;
END$$

DROP TRIGGER IF EXISTS hr_user_group_trigger_i$$

CREATE TRIGGER hr_user_group_trigger_i AFTER INSERT ON hr_user_group
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_user_group','INSERT','',CONCAT('\'',NEW.name,'\',\'',NEW.comment,'\',\'',NEW.locked,'\',\'',NEW.accessPlugin,'\''));
END$$

DROP TRIGGER IF EXISTS hr_user_group_trigger_d$$

CREATE TRIGGER hr_user_group_trigger_d AFTER DELETE ON hr_user_group
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_user_group','DELETE',CONCAT('id=',OLD.id),'');
END$$

Delimiter ;

-- --------------------------------------------------------

--
-- Structure de la table `hr_user_group_access`
--

Delimiter $$

DROP TRIGGER IF EXISTS hr_user_group_access_trigger_u$$

CREATE TRIGGER hr_user_group_access_trigger_u AFTER UPDATE ON hr_user_group_access
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_user_group_access','UPDATE',CONCAT('id=',NEW.id),CONCAT('\'',NEW.id,'\',\'',NEW.id_group ,'\',\'',NEW.id_device ,'\',\'',NEW.id_access_level,'\''));
END$$

DROP TRIGGER IF EXISTS hr_user_group_access_trigger_i$$

CREATE TRIGGER hr_user_group_access_trigger_i AFTER INSERT ON hr_user_group_access
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_user_group_access','INSERT','',CONCAT('\'',NEW.id_group ,'\',\'',NEW.id_device,'\',\'',NEW.id_access_level,'\''));
END$$

DROP TRIGGER IF EXISTS hr_user_group_access_trigger_d$$

CREATE TRIGGER hr_user_group_access_trigger_d AFTER DELETE ON hr_user_group_access
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_user_group_access','DELETE',CONCAT('id=',OLD.id),'');
END$$

Delimiter ;

-- --------------------------------------------------------

--
-- Structure de la table `hr_user_group_attribution`
--

Delimiter $$

DROP TRIGGER IF EXISTS hr_user_group_attribution_trigger_u$$

CREATE TRIGGER hr_user_group_attribution_trigger_u AFTER UPDATE ON hr_user_group_attribution
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_user_group_attribution','UPDATE',CONCAT('id=',NEW.id),CONCAT('\'',NEW.id,'\',\'',NEW.id_user ,'\',\'',NEW.id_group,'\''));
END$$

DROP TRIGGER IF EXISTS hr_user_group_attribution_trigger_i$$

CREATE TRIGGER hr_user_group_attribution_trigger_i AFTER INSERT ON hr_user_group_attribution
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_user_group_attribution','INSERT','',CONCAT('\'',NEW.id_user ,'\',\'',NEW.id_group,'\''));
END$$

DROP TRIGGER IF EXISTS hr_user_group_attribution_trigger_d$$

CREATE TRIGGER hr_user_group_attribution_trigger_d AFTER DELETE ON hr_user_group_attribution
FOR EACH ROW
BEGIN
  INSERT INTO hr_trigger_change (`table`,`action`,`key`,`newValue`)
    VALUES ('hr_user_group_attribution','DELETE',CONCAT('id=',OLD.id),'');
END$$

Delimiter ;